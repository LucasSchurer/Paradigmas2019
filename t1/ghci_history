funcAux "pedal"
:l t1.hs
funcAux "pedal"
:l t1.hs
funcAux "pedal"
funcAux "pedal"
:l t1.hs
:l t1.hs
:l t1.hs
:l t1.hs
:l t1.hs
funcAux "pedal"
func ["palavras", "paralelas", "pedal", "paralelepipedo"]
:l t1.hs
func ["palavras", "paralelas", "pedal", "paralelepipedo"]
lis ["palavras", "paralelas", "pedal", "paralelepipedo"]
:l t1.hs
betterEncodeName "Anderson Silva"
:l t1.hs
betterEncodeName "Anderson Silva"
:l t1.hs
:l t1.hs
:l t1.hs
encodeName "Anderson Silva"
encodeName "Anderson Silva"
encodeName "anderson"
:l t1.hs
encodeName "anderson"
encodeName "Anderson Silva"
:l t1.hs
:l t1.hs
encodeNameAux 'a'
:l t1.hs
:l t1.hs
encodeName "anderson"
:l t1.hs
userName "Anderson Silva"
:l t1.hs
:l t1.hs
userName "Anderson Silva"
:l t1.hs
userName "Anderson Silva"
:l t1.hs
userName "Anderson Silva"
:l t1.hs
:l t1.hs
:l t1.hs
:l t1.hs
'L' ++ "AAA"
userNameAux "Lucas"
:l t1.hs
userName "Anderson Silva"
:l t1.hs
:l t1.hs
userName "Anderson Silva"
:l t1.hs
:l t1.hs
lastName "Bon Jovi"
:l t1.hs
lastName "Bon Jovi"
:l t1.hs
lastName "Bon Jovi"
:l t1.hs
lastName "Bon Jovi"
:l t1.hs
lastName "Bon Jovi"
lastName "Anderson Silva"
:l t1.hs
isInt "123455941934121dasdasdas23"
isInt "12345594193412123"
isInt "12345aa123"
isInt "12345aa"
isInt "12345"
isIntAux2 [True, True, True, False, False]
isIntAux2 [True, True, False]
isIntAux2 [True, True, True]
:l t1.hs
:l t1.hs
:l t1.hs
:l t1.hs
:l t1.hs
:l t1.hs
filter (\x -> x == False) [True, False, True]
filter (\x -> x == False) [True, True, True]
takeWhile (/= True) [True, True, False, True]
takeWhile (/= True) [True, True, False, True]
takeWhile (/= True) [True, False, True, True]
takeWhile (\= True) [True, False, True, True]
takeWhile (== True) [True, False, True, True]
takeWhile (== True) [True, True, True, True]
takeWhile (\= True) [True, True, True, True]
takeWhile (\= True) True
isInt "1234"
:l t1.hs
:l t1.hs
:l t1.hs
:l t1.hs
isInt "1234asdsa"
isInt "1234"
:l t1.hs
